[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides.html",
    "href": "material/1_mon/rse/rse_basics_slides.html",
    "title": "Introduction to Research Software Engineering",
    "section": "",
    "text": "DORA declaration in 2012: reshape how research impact should be assessed underlining importance of software\n\n\nFor the purposes of research assessment, consider the value and impact of all research outputs (including datasets and software) in addition to research publications …\n\n\nUK survey in 2014: 7 out of 10 researchers could not conduct research without software.\nDFG funding calls on research software sustainability in 2016 & 2019 & 2023\nNationale Forschungsdaten Infrastruktur, NFDI since 2020\nLack of careers for software developers in academia\nLack of reproducibility of research that uses software (“works for me on my machine” vs. “works for everyone everywhere”)\n\n\n\n\n\n… academic software developers needed a name: Research Software Engineers\nUK Society of RSE:\n\nA Research Software Engineer (RSE) combines professional software engineering expertise with an intimate understanding of research.\n\n\n“Movement” started in the UK, first UK RSE conference in 2016\nFirst conferences in Germany and the Netherlands in 2019\nde-RSE position paper in 2020\nSecond Thursday of October is the International RSE Day\nWhy be an RSE? Interesting and novel projects, technical freedom, RSEs come from varied backgrounds, development for social good\n\n\n\n\n\n\nYes. Research also happens in industry.\nAll RSE things we learn (Git, packaging, CI/CD, virtualization, documentation, …) is also highly relevant for non-research software.\nCompanies use (more and more) the same workflows and tools.\n\nIt is not just about coding. It is about collaborative work.\n\nOpen-source development excellent door opener for industry.\nSome companies use open-source software and need to make contributions.\nSome companies develop their software as open-source software."
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides.html#starting-points",
    "href": "material/1_mon/rse/rse_basics_slides.html#starting-points",
    "title": "Introduction to Research Software Engineering",
    "section": "",
    "text": "DORA declaration in 2012: reshape how research impact should be assessed underlining importance of software\n\n\nFor the purposes of research assessment, consider the value and impact of all research outputs (including datasets and software) in addition to research publications …\n\n\nUK survey in 2014: 7 out of 10 researchers could not conduct research without software.\nDFG funding calls on research software sustainability in 2016 & 2019 & 2023\nNationale Forschungsdaten Infrastruktur, NFDI since 2020\nLack of careers for software developers in academia\nLack of reproducibility of research that uses software (“works for me on my machine” vs. “works for everyone everywhere”)"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides.html#rse-movement",
    "href": "material/1_mon/rse/rse_basics_slides.html#rse-movement",
    "title": "Introduction to Research Software Engineering",
    "section": "",
    "text": "… academic software developers needed a name: Research Software Engineers\nUK Society of RSE:\n\nA Research Software Engineer (RSE) combines professional software engineering expertise with an intimate understanding of research.\n\n\n“Movement” started in the UK, first UK RSE conference in 2016\nFirst conferences in Germany and the Netherlands in 2019\nde-RSE position paper in 2020\nSecond Thursday of October is the International RSE Day\nWhy be an RSE? Interesting and novel projects, technical freedom, RSEs come from varied backgrounds, development for social good"
  },
  {
    "objectID": "material/1_mon/rse/rse_basics_slides.html#do-i-need-this-in-industry",
    "href": "material/1_mon/rse/rse_basics_slides.html#do-i-need-this-in-industry",
    "title": "Introduction to Research Software Engineering",
    "section": "",
    "text": "Yes. Research also happens in industry.\nAll RSE things we learn (Git, packaging, CI/CD, virtualization, documentation, …) is also highly relevant for non-research software.\nCompanies use (more and more) the same workflows and tools.\n\nIt is not just about coding. It is about collaborative work.\n\nOpen-source development excellent door opener for industry.\nSome companies use open-source software and need to make contributions.\nSome companies develop their software as open-source software."
  },
  {
    "objectID": "material/2_tue/git/git_basics_demo.html",
    "href": "material/2_tue/git/git_basics_demo.html",
    "title": "Git Demo",
    "section": "",
    "text": "Expert level poll on git: ask students to estimate their level.\n\nBeginner: I have hardly ever used Git\nUser: pull, commit, push, status, diff\nDeveloper: fork, branch, merge, checkout\nMaintainer: rebase, squash, cherry-pick, bisect\nOwner: submodules\n\n\n\n\n\ngit overview picture from py-rse\n\n\n\ngit --help, git commit --help\nincomplete statement git comm\nThere is a difference between Git and hosting services (forges)\n\nGitHub\nGitLab, open-source, hosted e.g. at IPVS\nBitbucket\nSourceForge\nmany more\noften, more than just hosting, also DevOps\n\nGive outlook on remainder of Git chapter: How I work with Git, quiz, advanced topics (workflows, rebase, standards), my neat little Git trick\n\n\n\n\nStarting remarks:\n\nThere is not the one solution how to do things with Git. I simply show what I typically use.\nDon’t use a client if you don’t understand the command line git\n\nLook at GitHub\n\n\npreCICE repository\ndefault branch develop\nfork -&gt; my fork\n\n\nWorking directory:\n\n\nZSH shell shows git branches\ngit remote -v (I have upstream, myfork, …)\nmention difference between ssh and https (also see GitHub)\nget newest changes git pull upstream develop\ngit log -&gt; I use special format, see ~/.gitconfig,\ncheck log on GitHub; explain short hash\ngit branch\ngit branch add-demo-feature\ngit checkout add-demo-feature\n\n\nFirst commit\n\n\ngit status -&gt; always tells you what you can do\nvi src/action/Action.hpp -&gt; add #include \"MagicHeader.hpp\"\ngit diff, git diff src/com/Action.hpp, git diff --color-words\ngit status, git add, git status\ngit commit -&gt; “Include MagicHeader in Action.hpp”\ngit status, git log, git log -p, git show\n\n\nChange or revert things\n\n\nI forgot to add sth: git reset --soft HEAD~1, git status\ngit diff, git diff HEAD because already staged\ngit log\ngit commit\nactually all that is nonsense: git reset --hard HEAD~1\nmodify again, all nonsense before committing: git checkout src/action/Action.hpp\n\n\nStash\n\n\nwhile working on unfinished feature, I need to change / test this other thing quickly, too lazy for commits / branches\ngit stash\ngit stash pop\n\n\nCreate PR\n\n\ncreate commit again\npreview what will be in PR: git diff develop..add-demo-feature\ngit push -u myfork add-demo-feature -&gt; copy link\nexplain PR template\nexplain target branch\nexplain “Allow edits by maintainers”\ncancel\nmy fork -&gt; branches -&gt; delete\n\n\nCheck out someone else’s work\n\n\nhave a look at an existing PR, look at all tabs, show suggestion feature\nbut sometimes we want to really build and try sth out …\ngit remote -v\ngit remote add alex git@github.com:ajaust/precice.git if I don’t have remote already (or somebody else)\ngit fetch alex\ngit checkout -t alex/[branch-name]\nI could now also push to ajaust’s remote\n\n\n\n\n\n\n\n\nVideo: Git in 15 minutes: basics, branching, no remote\nThe GitHub Blog: Commits are snapshots, not diffs\nChapters 6 and 7 of Research Software Engineering with Python\nPodcast All Things Git: History of VC\ngit purr\n\n\n\n\n\nOfficial documentation"
  },
  {
    "objectID": "material/2_tue/git/git_basics_demo.html#recap-of-git-basics",
    "href": "material/2_tue/git/git_basics_demo.html#recap-of-git-basics",
    "title": "Git Demo",
    "section": "",
    "text": "Expert level poll on git: ask students to estimate their level.\n\nBeginner: I have hardly ever used Git\nUser: pull, commit, push, status, diff\nDeveloper: fork, branch, merge, checkout\nMaintainer: rebase, squash, cherry-pick, bisect\nOwner: submodules\n\n\n\n\n\ngit overview picture from py-rse\n\n\n\ngit --help, git commit --help\nincomplete statement git comm\nThere is a difference between Git and hosting services (forges)\n\nGitHub\nGitLab, open-source, hosted e.g. at IPVS\nBitbucket\nSourceForge\nmany more\noften, more than just hosting, also DevOps\n\nGive outlook on remainder of Git chapter: How I work with Git, quiz, advanced topics (workflows, rebase, standards), my neat little Git trick"
  },
  {
    "objectID": "material/2_tue/git/git_basics_demo.html#how-i-work-with-git",
    "href": "material/2_tue/git/git_basics_demo.html#how-i-work-with-git",
    "title": "Git Demo",
    "section": "",
    "text": "Starting remarks:\n\nThere is not the one solution how to do things with Git. I simply show what I typically use.\nDon’t use a client if you don’t understand the command line git\n\nLook at GitHub\n\n\npreCICE repository\ndefault branch develop\nfork -&gt; my fork\n\n\nWorking directory:\n\n\nZSH shell shows git branches\ngit remote -v (I have upstream, myfork, …)\nmention difference between ssh and https (also see GitHub)\nget newest changes git pull upstream develop\ngit log -&gt; I use special format, see ~/.gitconfig,\ncheck log on GitHub; explain short hash\ngit branch\ngit branch add-demo-feature\ngit checkout add-demo-feature\n\n\nFirst commit\n\n\ngit status -&gt; always tells you what you can do\nvi src/action/Action.hpp -&gt; add #include \"MagicHeader.hpp\"\ngit diff, git diff src/com/Action.hpp, git diff --color-words\ngit status, git add, git status\ngit commit -&gt; “Include MagicHeader in Action.hpp”\ngit status, git log, git log -p, git show\n\n\nChange or revert things\n\n\nI forgot to add sth: git reset --soft HEAD~1, git status\ngit diff, git diff HEAD because already staged\ngit log\ngit commit\nactually all that is nonsense: git reset --hard HEAD~1\nmodify again, all nonsense before committing: git checkout src/action/Action.hpp\n\n\nStash\n\n\nwhile working on unfinished feature, I need to change / test this other thing quickly, too lazy for commits / branches\ngit stash\ngit stash pop\n\n\nCreate PR\n\n\ncreate commit again\npreview what will be in PR: git diff develop..add-demo-feature\ngit push -u myfork add-demo-feature -&gt; copy link\nexplain PR template\nexplain target branch\nexplain “Allow edits by maintainers”\ncancel\nmy fork -&gt; branches -&gt; delete\n\n\nCheck out someone else’s work\n\n\nhave a look at an existing PR, look at all tabs, show suggestion feature\nbut sometimes we want to really build and try sth out …\ngit remote -v\ngit remote add alex git@github.com:ajaust/precice.git if I don’t have remote already (or somebody else)\ngit fetch alex\ngit checkout -t alex/[branch-name]\nI could now also push to ajaust’s remote"
  },
  {
    "objectID": "material/2_tue/git/git_basics_demo.html#further-reading",
    "href": "material/2_tue/git/git_basics_demo.html#further-reading",
    "title": "Git Demo",
    "section": "",
    "text": "Video: Git in 15 minutes: basics, branching, no remote\nThe GitHub Blog: Commits are snapshots, not diffs\nChapters 6 and 7 of Research Software Engineering with Python\nPodcast All Things Git: History of VC\ngit purr\n\n\n\n\n\nOfficial documentation"
  },
  {
    "objectID": "material/2_tue/git/intro_slides.html",
    "href": "material/2_tue/git/intro_slides.html",
    "title": "Introduction to version control",
    "section": "",
    "text": "Refresh and organize students’ existing knowledge on Git (learn how to learn more).\nStudents can explain difference between merge and rebase and when to use what.\nHow to use Git workflows to organize research software development in a team.\nGet to know a few useful GitHub/GitLab standards and a few helpful tools.\n\n\n\n\n\nVersion control …\n\ntracks changes to files and helps people share those changes with each other.\n\nCould also be done via email / Google Docs / …, but not as accurately and efficiently\n\nwas originally developed for software development, but today cornerstone of reproducible research\n\n\n“If you can’t git diff a file format, it’s broken.”\n\n\n\n\n\n\nmaster (or main) copy of code in repository, can’t edit directly\nInstead: check out a working copy of code, edit, commit changes back\nRepository records complete revision history\n\nYou can go back in time\nIt’s clear who did what when\n\n\n\n\n\n\n\nhttp://phdcomics.com/comics/archive/phd052810s.gif\n\n\n\n\nThe old centralized variants:\n\n1982: RCS (Revision Control System), operates on single files\n1986 (release in 1990): CVS (Concurrent Versions System), front end of RCS, operates on whole projects\n1994: VSS (Microsoft Visual SourceSafe)\n2000: SVN (Apache Subversion), mostly compatible successor of CVS, still used today\n\n\n\n\n\nDistributed version control:\n\nBesides remote master version, also local copy of repository\nMore memory required, but much better performance\nFor a long time: highly fragmented market\n\n2000: BitKeeper (originally proprietary software)\n2005: Mercurial\n2005: Git\nA few more\n\n\nLearn more: Podcast All Things Git: History of VC\n\n\n\n\nNo longer a fragmented market, there is nearly only Git today:\n\nStackoverflow developer survey 2021: &gt; “Over 90% of respondents use Git, suggesting that it is a fundamental tool to being a developer.”\nAll software project candidates for contribution challenge use Git\nIs this good or bad?\n\n\n\n\n\nGit itself is open-source: GPL license\n\nsource on GitHub, contributions are a bit more complicated than a simple PR\nwritten mainly in C\nstarted by Linus Torvalds, core maintainer since later 2005: Junio Hamano"
  },
  {
    "objectID": "material/2_tue/git/intro_slides.html#learning-goals-of-section",
    "href": "material/2_tue/git/intro_slides.html#learning-goals-of-section",
    "title": "Introduction to version control",
    "section": "",
    "text": "Refresh and organize students’ existing knowledge on Git (learn how to learn more).\nStudents can explain difference between merge and rebase and when to use what.\nHow to use Git workflows to organize research software development in a team.\nGet to know a few useful GitHub/GitLab standards and a few helpful tools."
  },
  {
    "objectID": "material/2_tue/git/intro_slides.html#why-do-we-need-version-control",
    "href": "material/2_tue/git/intro_slides.html#why-do-we-need-version-control",
    "title": "Introduction to version control",
    "section": "",
    "text": "Version control …\n\ntracks changes to files and helps people share those changes with each other.\n\nCould also be done via email / Google Docs / …, but not as accurately and efficiently\n\nwas originally developed for software development, but today cornerstone of reproducible research\n\n\n“If you can’t git diff a file format, it’s broken.”"
  },
  {
    "objectID": "material/2_tue/git/intro_slides.html#how-does-version-control-work",
    "href": "material/2_tue/git/intro_slides.html#how-does-version-control-work",
    "title": "Introduction to version control",
    "section": "",
    "text": "master (or main) copy of code in repository, can’t edit directly\nInstead: check out a working copy of code, edit, commit changes back\nRepository records complete revision history\n\nYou can go back in time\nIt’s clear who did what when"
  },
  {
    "objectID": "material/2_tue/git/intro_slides.html#the-alternative-a-story-told-in-file-names",
    "href": "material/2_tue/git/intro_slides.html#the-alternative-a-story-told-in-file-names",
    "title": "Introduction to version control",
    "section": "",
    "text": "http://phdcomics.com/comics/archive/phd052810s.gif"
  },
  {
    "objectID": "material/2_tue/git/intro_slides.html#a-very-short-history-of-version-control-i",
    "href": "material/2_tue/git/intro_slides.html#a-very-short-history-of-version-control-i",
    "title": "Introduction to version control",
    "section": "",
    "text": "The old centralized variants:\n\n1982: RCS (Revision Control System), operates on single files\n1986 (release in 1990): CVS (Concurrent Versions System), front end of RCS, operates on whole projects\n1994: VSS (Microsoft Visual SourceSafe)\n2000: SVN (Apache Subversion), mostly compatible successor of CVS, still used today"
  },
  {
    "objectID": "material/2_tue/git/intro_slides.html#a-very-short-history-of-version-control-ii",
    "href": "material/2_tue/git/intro_slides.html#a-very-short-history-of-version-control-ii",
    "title": "Introduction to version control",
    "section": "",
    "text": "Distributed version control:\n\nBesides remote master version, also local copy of repository\nMore memory required, but much better performance\nFor a long time: highly fragmented market\n\n2000: BitKeeper (originally proprietary software)\n2005: Mercurial\n2005: Git\nA few more\n\n\nLearn more: Podcast All Things Git: History of VC"
  },
  {
    "objectID": "material/2_tue/git/intro_slides.html#the-only-standard-today-git",
    "href": "material/2_tue/git/intro_slides.html#the-only-standard-today-git",
    "title": "Introduction to version control",
    "section": "",
    "text": "No longer a fragmented market, there is nearly only Git today:\n\nStackoverflow developer survey 2021: &gt; “Over 90% of respondents use Git, suggesting that it is a fundamental tool to being a developer.”\nAll software project candidates for contribution challenge use Git\nIs this good or bad?"
  },
  {
    "objectID": "material/2_tue/git/intro_slides.html#more-facts-on-git",
    "href": "material/2_tue/git/intro_slides.html#more-facts-on-git",
    "title": "Introduction to version control",
    "section": "",
    "text": "Git itself is open-source: GPL license\n\nsource on GitHub, contributions are a bit more complicated than a simple PR\nwritten mainly in C\nstarted by Linus Torvalds, core maintainer since later 2005: Junio Hamano"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Note\n\n\n\nThe schedule is very preliminary and will most likely change drastically :)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\n\n\n\n\n\nArrival\nBasics of RSE and Julia\nJulia+RSE\nJulia+Viz+Simulation\nStats + Projects\nOptimization + Project\n\n\n\n\n\n\n\n\n\n\n\n09.00\n\n\nBenjamin: Advanced Git / Contributing (1+1)\nHendrik: All the nice Julia Features (1+1)?\nMarco Resampling: Bootstrap & Permutation tests (2+2)\nDoug: Optimized (bootstrap) code (1)?\n\n\n10.00\n\nBenjamin: Welcome / What and why RSE? (1)\nBenjamin/Bene: Unittests (1+1)\nBene Vizualization in Julia (1+1)\n~~~\nProject Work\n\n\n11.00\n\nHendrik: Why Julia? (1)?\n~~~~\n~~~\n\ncont.\n\n\n12.00\n\nBene: First Steps - “Hello World” + Types (1+1)\n~~~~\n~~~\n\n\n\n\n13.00\n\nLunch\nLunch\nLunch\nLunch\nLunch\n\n\n14.00\n\n~~~\nBenjamin: Continuous Integration (1+1)\nLisa: Simulating Data (1+1)\nProject Work\nProject Work\n\n\n15.00\n\nBene: Julia + Git + Packages/Environments (1+1)\nLisa: Code-Review (1+1)?\n~~~\n\ncont.\n\n\n16.00\n\n~~~\n~~~\nDoug: Things to keep in mind for datastorage (1+1)?\n\n\n\n\n17.00\n\nBene: MyFirstPackage.jl (1+1)\n~~~\n~~~\n\nFarewell\n\n\n18.00\n\n~~~\nBene: PkgTemplates.jl (0.5+0.5) =&gt; wed/hendrik?\n~~~\n\n\n\n\n19.00\nPre-Get-together\nWelcome-BBQ @ SimTech\nSocial 1\nSocial 2\nSocial 3\n\n\n\n\nMissing Topics right now: Documentation, License, MultipleRegression? Simulating Data - Requirements regarding regression?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Research Software Engineering with Julia: Basics, Visualization, and Statistics",
    "section": "",
    "text": "📑 Course Brief\nNearly all scientists are writing research software for their analyses - but most did not receive any training for it. We will teach the basics of such research software engineering, of visualization and statistics in JuliaLang - a scientific programming language.\n\n\n\n\n\n\nWe will have a healthy mix of keynotes from invited lecturers and hands-on sessions.\n\n\n\n\n\n🎯 Learning Objectives\n\nLearn the basics of the scientific programming language Julia\nFrom git to continuous integration: Reearch Software Engineering, with and without Julia\nHow to generate complex multipanel visualizations and use interactive plots efficiently\n\n\n\n💶 Costs\n\nsmall course fee, including lunch + dinner\nYou have to pay for Hotel + Travel + Breakfast\n\n\n\n💬 Typical questions that will be answered\n\nHow can I use git beyond “git clone” and “rm * + git clone”?\nWhat is continuous integration - and why should I care as a researcher?\nHow do I use unit-testing?\nWhat kinds of documentation should I write?\nWhy are these skills that will boost my reproducibility in my projects?\nWhy is Julia so great for RSE?\nHow can I run quick interactive visualizations?\nIs bootstrapping really all I need to know for statistics?\n\n\n\nAbstract\nThe development of research software has become an important part of research projects in many areas of science and engineering. At the same time, increasing computational power in the area of high performance computing has made computationally challenging statistical tasks feasible and highly desirable in many application fields. In this week-long summer school, we will therefore address these different aspects and familiarize you with the most essential paradigms of software development, which support the design of efficient, user-friendly, and sustainable software. In particular, we will focus on the scientific programming language Julia. The summer school is organized around keynote presentations by invited Julia experts and many hands-on tutorials. First, a gentle introduction including packaging, testing, virtualization, interaction, and visualization will supply you with the essential skills you need to use Julia in your research. Afterwards, we build on these skills to implement computationally expensive statistical methods. In particular, we will focus on methods for regression and resampling using bootstrap and permutations. That is, methods addressing two of the most common challenges in statistics: estimation of the relationship between variables of interest and the quantification of uncertainty. You are invited to bring your own problem to apply the skills you learn in this summer school."
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teachers",
    "section": "",
    "text": "Prof. Lisa DeBruine - Julia, Statistics, Simulation\nProf. Doug Bates - Julia, Statistics, Optimization\nProf. Hendrik Ranocha - Julia, RSE, Optimization"
  },
  {
    "objectID": "teaching.html#invited-speakers",
    "href": "teaching.html#invited-speakers",
    "title": "Teachers",
    "section": "",
    "text": "Prof. Lisa DeBruine - Julia, Statistics, Simulation\nProf. Doug Bates - Julia, Statistics, Optimization\nProf. Hendrik Ranocha - Julia, RSE, Optimization"
  },
  {
    "objectID": "teaching.html#organizers-and-teachers",
    "href": "teaching.html#organizers-and-teachers",
    "title": "Teachers",
    "section": "Organizers and Teachers",
    "text": "Organizers and Teachers\nMarco Oesting - Statistics\nBenjamin Uekermann - RSE\nBenedikt Ehinger - Julia, Visualization, RSE"
  },
  {
    "objectID": "material/2_tue/git/standards_slides.html",
    "href": "material/2_tue/git/standards_slides.html",
    "title": "GitHub / GitLab Standards",
    "section": "",
    "text": "GitHub uses standards or conventions.\nCertain files or names trigger certain behavior automatically.\nMany are supported by most forges.\n\nThis is good.\nEverybody should know them.\n\n\n\n\n\n\nCertain files lead to special formatting (normally directly at root of repo):\n\nREADME.md\n\n… contains meta information / overview / first steps of software.\n… gets rendered on landing page (and in every folder).\n\nLICENSE\n\n… contains software license.\n… gets rendered on right sidebar, when clicking on license, and on repo preview.\n\nCONTRIBUTING.md\n\n… contains guidelines for contributing.\nFirst-time contributors see banner.\n\nCODE_OF_CONDUCT.md\n\n… contains code of conduct.\n… gets rendered on right sidebar.\n\n\n\n\n\n\n\nTemplates for description in .github folder\ncloses #34 (or several other keywords: fixes, resolves) in commit message or PR description will close issue 34 when merged.\nhelp wanted label gets rendered on repo preview (e.g. “3 issues need help”)."
  },
  {
    "objectID": "material/2_tue/git/standards_slides.html#what-do-we-mean-with-standards",
    "href": "material/2_tue/git/standards_slides.html#what-do-we-mean-with-standards",
    "title": "GitHub / GitLab Standards",
    "section": "",
    "text": "GitHub uses standards or conventions.\nCertain files or names trigger certain behavior automatically.\nMany are supported by most forges.\n\nThis is good.\nEverybody should know them."
  },
  {
    "objectID": "material/2_tue/git/standards_slides.html#special-files",
    "href": "material/2_tue/git/standards_slides.html#special-files",
    "title": "GitHub / GitLab Standards",
    "section": "",
    "text": "Certain files lead to special formatting (normally directly at root of repo):\n\nREADME.md\n\n… contains meta information / overview / first steps of software.\n… gets rendered on landing page (and in every folder).\n\nLICENSE\n\n… contains software license.\n… gets rendered on right sidebar, when clicking on license, and on repo preview.\n\nCONTRIBUTING.md\n\n… contains guidelines for contributing.\nFirst-time contributors see banner.\n\nCODE_OF_CONDUCT.md\n\n… contains code of conduct.\n… gets rendered on right sidebar."
  },
  {
    "objectID": "material/2_tue/git/standards_slides.html#issues-and-prs",
    "href": "material/2_tue/git/standards_slides.html#issues-and-prs",
    "title": "GitHub / GitLab Standards",
    "section": "",
    "text": "Templates for description in .github folder\ncloses #34 (or several other keywords: fixes, resolves) in commit message or PR description will close issue 34 when merged.\nhelp wanted label gets rendered on repo preview (e.g. “3 issues need help”)."
  },
  {
    "objectID": "material/2_tue/git/workflow_slides.html",
    "href": "material/2_tue/git/workflow_slides.html",
    "title": "Working in Teams / Git Workflows",
    "section": "",
    "text": "Git offers a lot of flexibility in managing changes.\nWhen working in a team, some agreements need to be made however (especially on how to work with branches).\n\n\n\n\n\n\nThere are standard solutions.\nIt depends on the size of the team.\nWorkflow should enhance effectiveness of team, not be a burden that limits productivity.\n\n\n\n\n\n\nOnly one branch: the main branch\nKeep your changes in local commits till some feature is ready\nIf ready, directly push to main; no PRs, no reviews\nConflicts: fix locally (push not allowed anyway), use git pull --rebase\nGood for: small teams, small projects, projects that are anyway reviewed over and over again\nExample: LaTeX papers\n\nPut each section in separate file\nPut each sentence in separate line\n\n\n\n\n\n\n\nEach feature (or bugfix) in separate branch\nPush feature branch to remote, use descriptive name\n\ne.g. issue number in name if each branch closes one issue\n\nmain should never contain broken code\nProtect direct push to main\nPR (or MR) with review to merge from feature branch to main\nRebase feature branch on main if necessary\nDelete remote branch once merged and no longer needed (one click on GitHub after merge)\nGood for: small teams, small projects, prototyping, websites (continuous deployment), documentation\nAka. trunk-based development or GitHub flow\n\n\n\n\n\n\nVisualization by Vincent Driessen, from original blog post in 2010\nmain and develop\n\nmain contains releases as tags\ndevelop contains latest features\n\nFeature branches created of develop, PRs back to develop\nProtect main and (possibly) develop from direct pushes\nDedicated release branches (e.g., v1.0) created of develop\n\nTested, fixed, merged to main\nAfterwards, tagged, merged back to develop\n\nHotfix branches directly of and to main\nGood for: software with users, larger teams\nThere is a tool git-flow, a wrapper around git, e.g. git flow init … but not really necessary IMHO\n\n\n\n\n\n\nGitflow + feature branches on other forks\nMore control over access rights, distinguish between maintainers and external contributors\nShould maintainers also use branches on their forks?\n\nMakes overview of branches easier\nDistinguishes between prototype branches (on fork, no PR), serious enhancements (on fork with PR), joint enhancements (on upstream)\n\nGood for: open-source projects with external contributions (used more or less in preCICE)\n\n\n\n\n\n\nFor all workflows, it is better to do small PRs\n\nEasier to review\nFaster to merge –&gt; fewer conflicts\nEasier to squash\n\n\n\n\n\n\n\nAtlassian docs on workflows\nOriginal gitflow blog post\nTrunk-based development\nGitHub flow\nHow to keep pull requests manageable"
  },
  {
    "objectID": "material/2_tue/git/workflow_slides.html#why-workflows",
    "href": "material/2_tue/git/workflow_slides.html#why-workflows",
    "title": "Working in Teams / Git Workflows",
    "section": "",
    "text": "Git offers a lot of flexibility in managing changes.\nWhen working in a team, some agreements need to be made however (especially on how to work with branches)."
  },
  {
    "objectID": "material/2_tue/git/workflow_slides.html#which-workflow",
    "href": "material/2_tue/git/workflow_slides.html#which-workflow",
    "title": "Working in Teams / Git Workflows",
    "section": "",
    "text": "There are standard solutions.\nIt depends on the size of the team.\nWorkflow should enhance effectiveness of team, not be a burden that limits productivity."
  },
  {
    "objectID": "material/2_tue/git/workflow_slides.html#centralized-workflow",
    "href": "material/2_tue/git/workflow_slides.html#centralized-workflow",
    "title": "Working in Teams / Git Workflows",
    "section": "",
    "text": "Only one branch: the main branch\nKeep your changes in local commits till some feature is ready\nIf ready, directly push to main; no PRs, no reviews\nConflicts: fix locally (push not allowed anyway), use git pull --rebase\nGood for: small teams, small projects, projects that are anyway reviewed over and over again\nExample: LaTeX papers\n\nPut each section in separate file\nPut each sentence in separate line"
  },
  {
    "objectID": "material/2_tue/git/workflow_slides.html#feature-branch-workflow",
    "href": "material/2_tue/git/workflow_slides.html#feature-branch-workflow",
    "title": "Working in Teams / Git Workflows",
    "section": "",
    "text": "Each feature (or bugfix) in separate branch\nPush feature branch to remote, use descriptive name\n\ne.g. issue number in name if each branch closes one issue\n\nmain should never contain broken code\nProtect direct push to main\nPR (or MR) with review to merge from feature branch to main\nRebase feature branch on main if necessary\nDelete remote branch once merged and no longer needed (one click on GitHub after merge)\nGood for: small teams, small projects, prototyping, websites (continuous deployment), documentation\nAka. trunk-based development or GitHub flow"
  },
  {
    "objectID": "material/2_tue/git/workflow_slides.html#gitflow",
    "href": "material/2_tue/git/workflow_slides.html#gitflow",
    "title": "Working in Teams / Git Workflows",
    "section": "",
    "text": "Visualization by Vincent Driessen, from original blog post in 2010\nmain and develop\n\nmain contains releases as tags\ndevelop contains latest features\n\nFeature branches created of develop, PRs back to develop\nProtect main and (possibly) develop from direct pushes\nDedicated release branches (e.g., v1.0) created of develop\n\nTested, fixed, merged to main\nAfterwards, tagged, merged back to develop\n\nHotfix branches directly of and to main\nGood for: software with users, larger teams\nThere is a tool git-flow, a wrapper around git, e.g. git flow init … but not really necessary IMHO"
  },
  {
    "objectID": "material/2_tue/git/workflow_slides.html#forking-workflow",
    "href": "material/2_tue/git/workflow_slides.html#forking-workflow",
    "title": "Working in Teams / Git Workflows",
    "section": "",
    "text": "Gitflow + feature branches on other forks\nMore control over access rights, distinguish between maintainers and external contributors\nShould maintainers also use branches on their forks?\n\nMakes overview of branches easier\nDistinguishes between prototype branches (on fork, no PR), serious enhancements (on fork with PR), joint enhancements (on upstream)\n\nGood for: open-source projects with external contributions (used more or less in preCICE)"
  },
  {
    "objectID": "material/2_tue/git/workflow_slides.html#do-small-prs",
    "href": "material/2_tue/git/workflow_slides.html#do-small-prs",
    "title": "Working in Teams / Git Workflows",
    "section": "",
    "text": "For all workflows, it is better to do small PRs\n\nEasier to review\nFaster to merge –&gt; fewer conflicts\nEasier to squash"
  },
  {
    "objectID": "material/2_tue/git/workflow_slides.html#quick-reads",
    "href": "material/2_tue/git/workflow_slides.html#quick-reads",
    "title": "Working in Teams / Git Workflows",
    "section": "",
    "text": "Atlassian docs on workflows\nOriginal gitflow blog post\nTrunk-based development\nGitHub flow\nHow to keep pull requests manageable"
  },
  {
    "objectID": "material/2_tue/git/merge_rebase_slides.html",
    "href": "material/2_tue/git/merge_rebase_slides.html",
    "title": "Merge vs. Rebase",
    "section": "",
    "text": "Commits are snapshots + pointer to parent, not diffs\n\nBut for linear history, this makes no difference\n\nEach normal commit has one parent commit\n\nc05f017^ &lt;– c05f017\nA = B^ &lt;– B\n(^ is the same as ~1)\nPointer to parent commit goes into hash\n\ngit show gives diff of commit to parent\n\n\n\n\n\n\ngit checkout main && git merge feature \nA merge commit (normally) has two parent commits M^1 and M^2 (don’t confuse ^2 with ~2)\n\nCan’t show unique diff\nFirst parent relative to the branch you are on (M^1 = C, M^2 = E)\n\ngit show\n\ngit show: “combined diff”\nGitHub: git show --first-parent\ngit show -m: separate diff to all parents\n\n\n\n\n\n\nWe use here:\n\nLinear history := no merge commits\n\n\nMerge commits are hard to understand per se.\nA merge takes all commits from feature to main (on git log). –&gt; Hard to understand\nDevelopers often follow projects by reading commits (reading the diffs). –&gt; Harder to read (where happened what)\nTracing bugs easier with linear history (see git bisect)\n\nExample: We know a bug was introduced between v1.3 and v1.4.\n\n\n\n\n\n\n\nReal conflicts are very rare in real projects, most merge commits are false positives (not conflicts) and should be avoided.\nIf there are no changes on main, git merge does a “fast-forward” merge (no merge commit).\nIf there are changes on main, rebase feature branch.\n\n\n\n\n\n\ngit checkout feature && git rebase main \nStates of issues change (and new parents) –&gt; history is rewritten\nIf feature is already on remote, it needs a force push git push --force myfork feature (or --force-with-lease).\nBe careful: Only use rebase if only you work on a branch (a local branch or a branch on your fork).\nFor local branches very helpful: git pull --rebase (fetch & rebase)\n\n\n\n\n\n\nGitHub offers three ways to merge a non-conflicting (no changes in same files) PR:\n\nCreate a merge commit\nSquash and merge\nRebase and merge\n\nLook at a PR together, e.g. PR 1432 from preCICE (will be closed eventually)\n\n\nWhat do the options do?\n\n\n\n\n\n\n… squashes all commits into one\n\nOften, single commits of feature branch are important while developing the feature,\n… but not when the feature is merged\nWorks well for small feature PRs\n\n… also does a rebase (interactively, git rebase -i)\n\n\n\n\n\n\nBut what if there is a conflict?\n\n\nResolve by rebasing feature branch (recommended)\nOr resolve by merging main into feature\n\n\n\n\n\n\nTry to keep a linear history with rebasing whenever reasonable\nDon’t use rebase on a public/shared branch during development\nSquash before merging if reasonable\nDelete feature branch after merging\nLocal view: git log --graph\nRemote view on GitHub, e.g. for preCICE\n\n\n\n\n\n\nBitbucket docs: “Merging vs. Rebasing”\nHackernoon: “What’s the diff?”\nGitHub Blog: “Commits are snapshots, not diffs”\nStack Overflow: “Git show of a merge commit”"
  },
  {
    "objectID": "material/2_tue/git/merge_rebase_slides.html#linear-history",
    "href": "material/2_tue/git/merge_rebase_slides.html#linear-history",
    "title": "Merge vs. Rebase",
    "section": "",
    "text": "Commits are snapshots + pointer to parent, not diffs\n\nBut for linear history, this makes no difference\n\nEach normal commit has one parent commit\n\nc05f017^ &lt;– c05f017\nA = B^ &lt;– B\n(^ is the same as ~1)\nPointer to parent commit goes into hash\n\ngit show gives diff of commit to parent"
  },
  {
    "objectID": "material/2_tue/git/merge_rebase_slides.html#merge-commits",
    "href": "material/2_tue/git/merge_rebase_slides.html#merge-commits",
    "title": "Merge vs. Rebase",
    "section": "",
    "text": "git checkout main && git merge feature \nA merge commit (normally) has two parent commits M^1 and M^2 (don’t confuse ^2 with ~2)\n\nCan’t show unique diff\nFirst parent relative to the branch you are on (M^1 = C, M^2 = E)\n\ngit show\n\ngit show: “combined diff”\nGitHub: git show --first-parent\ngit show -m: separate diff to all parents"
  },
  {
    "objectID": "material/2_tue/git/merge_rebase_slides.html#why-is-a-linear-history-important",
    "href": "material/2_tue/git/merge_rebase_slides.html#why-is-a-linear-history-important",
    "title": "Merge vs. Rebase",
    "section": "",
    "text": "We use here:\n\nLinear history := no merge commits\n\n\nMerge commits are hard to understand per se.\nA merge takes all commits from feature to main (on git log). –&gt; Hard to understand\nDevelopers often follow projects by reading commits (reading the diffs). –&gt; Harder to read (where happened what)\nTracing bugs easier with linear history (see git bisect)\n\nExample: We know a bug was introduced between v1.3 and v1.4."
  },
  {
    "objectID": "material/2_tue/git/merge_rebase_slides.html#how-to-get-a-linear-history",
    "href": "material/2_tue/git/merge_rebase_slides.html#how-to-get-a-linear-history",
    "title": "Merge vs. Rebase",
    "section": "",
    "text": "Real conflicts are very rare in real projects, most merge commits are false positives (not conflicts) and should be avoided.\nIf there are no changes on main, git merge does a “fast-forward” merge (no merge commit).\nIf there are changes on main, rebase feature branch."
  },
  {
    "objectID": "material/2_tue/git/merge_rebase_slides.html#rebase",
    "href": "material/2_tue/git/merge_rebase_slides.html#rebase",
    "title": "Merge vs. Rebase",
    "section": "",
    "text": "git checkout feature && git rebase main \nStates of issues change (and new parents) –&gt; history is rewritten\nIf feature is already on remote, it needs a force push git push --force myfork feature (or --force-with-lease).\nBe careful: Only use rebase if only you work on a branch (a local branch or a branch on your fork).\nFor local branches very helpful: git pull --rebase (fetch & rebase)"
  },
  {
    "objectID": "material/2_tue/git/merge_rebase_slides.html#github-pr-merge-variants",
    "href": "material/2_tue/git/merge_rebase_slides.html#github-pr-merge-variants",
    "title": "Merge vs. Rebase",
    "section": "",
    "text": "GitHub offers three ways to merge a non-conflicting (no changes in same files) PR:\n\nCreate a merge commit\nSquash and merge\nRebase and merge\n\nLook at a PR together, e.g. PR 1432 from preCICE (will be closed eventually)\n\n\nWhat do the options do?"
  },
  {
    "objectID": "material/2_tue/git/merge_rebase_slides.html#squash-and-merge",
    "href": "material/2_tue/git/merge_rebase_slides.html#squash-and-merge",
    "title": "Merge vs. Rebase",
    "section": "",
    "text": "… squashes all commits into one\n\nOften, single commits of feature branch are important while developing the feature,\n… but not when the feature is merged\nWorks well for small feature PRs\n\n… also does a rebase (interactively, git rebase -i)"
  },
  {
    "objectID": "material/2_tue/git/merge_rebase_slides.html#conflicts",
    "href": "material/2_tue/git/merge_rebase_slides.html#conflicts",
    "title": "Merge vs. Rebase",
    "section": "",
    "text": "But what if there is a conflict?\n\n\nResolve by rebasing feature branch (recommended)\nOr resolve by merging main into feature"
  },
  {
    "objectID": "material/2_tue/git/merge_rebase_slides.html#summary-and-final-remarks",
    "href": "material/2_tue/git/merge_rebase_slides.html#summary-and-final-remarks",
    "title": "Merge vs. Rebase",
    "section": "",
    "text": "Try to keep a linear history with rebasing whenever reasonable\nDon’t use rebase on a public/shared branch during development\nSquash before merging if reasonable\nDelete feature branch after merging\nLocal view: git log --graph\nRemote view on GitHub, e.g. for preCICE"
  },
  {
    "objectID": "material/2_tue/git/merge_rebase_slides.html#further-reading",
    "href": "material/2_tue/git/merge_rebase_slides.html#further-reading",
    "title": "Merge vs. Rebase",
    "section": "",
    "text": "Bitbucket docs: “Merging vs. Rebasing”\nHackernoon: “What’s the diff?”\nGitHub Blog: “Commits are snapshots, not diffs”\nStack Overflow: “Git show of a merge commit”"
  },
  {
    "objectID": "application.html",
    "href": "application.html",
    "title": "Applications",
    "section": "",
    "text": "Note\n\n\n\nApplication (most likely) opens in mid-June 2023"
  },
  {
    "objectID": "application.html#footnotes",
    "href": "application.html#footnotes",
    "title": "Applications",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWhile we know it is near impossible to gauge skills adequately, we still want to have some assurance on the minimal programming experience/skill level. We will ask to self-identify as Beginner (e.g. experience from courses, knows basic syntax), Advanced Beginner (did some analyses, basic plotting is no longer a problem), Intermediate (used it to complete a project/paper, can decode many of the error messages), Advanced (developed packages, can debug 90% of problems, helps others).↩︎"
  }
]